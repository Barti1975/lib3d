////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	  <3D Librairies developped during 2002-2021>
//	  Copyright (C) <2021>  <Laurent Cancé Francis, 10/08/1975>
//	  laurent.francis.cance@outlook.fr
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// shaders_dx10_gl20.h : created 2013
// wrapper fixed lib3d 1.3c graphic pipeline on Direct3D 10 or OpenGL2.0

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// quads & blur (ortho)
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_quad=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX PROJ;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 PROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"		Out = sample(0,Tex0);\n"
"       Out = Out * Diffuse;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_quad_pow2=
"[VERTEXFORMAT]\n"
"    XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"    TEXTURE Tex;\n"
"    MATRIX PROJ;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"
"    [POSITION]\n"
"        oPos = iPos *4 PROJ;\n"
"    [DIFFUSE]\n"
"        oDiffuse = iDiffuse;\n"
"    [MAPPING0]\n"
"        oTexture0.xy = iTexture0.xy;\n"
"    [SHADER]\n"
"        col = sample(0,Tex0);\n"
"        Out.rgb = col.rgb * col.rgb;\n"
"        Out.a = col.a;\n"
"        Out = Out * Diffuse;\n"
"    [RENDER_STATE]\n"
"        Texture[0] Tex\n"
"        TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////

char * shader_hll_quadglow=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX PROJ;\n"
"	VECTOR ALPHA;\n"
"	PSVECTOR PARAM;\n"
"	PSCONST pszero;\n"
"	PSCONST psone=1.0,1.0,1.0,1.0;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 PROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"		oTexture0.z = ALPHA.x;\n"
//"	[MAPPING1]\n"
//"		oTexture1 = PARAM;\n"
"	[SHADER]\n"
"		map = coord(Tex0);\n"
//"		coef = coord(Tex1);\n"
"		coef = PARAM;\n"
"		col = pszero;\n"
"		val = pszero;\n"

//	Quad(x,y,sx,sy,	0.0f+decal,	0.0f+decal,	1.0f,		1.0f,		r,g,b,a);
//	Quad(x,y,sx,sy,	0.0f,		0.0f+decal,	1.0f-decal,	1.0f,		r,g,b,a);
//	Quad(x,y,sx,sy,	0.0f+decal,	0.0f,		1.0f,		1.0f-decal,	r,g,b,a);
//	Quad(x,y,sx,sy,	0.0f,		0.0f,		1.0f-decal,	1.0f-decal,	r,g,b,a);

"		while (val.x<1.0);\n"

"			val.w = val.z * coef.w;\n"

"			decal.xy = map.xy * (psone.xy - val.zw);\n"

"			val.y = 1.0 - val.x;\n"
"			val.y = coef.z * val.y;\n"

"			tmp.xy = val.zw + decal.xy;\n"
"			c = sample(0,tmp.xy);\n"

"			tmp.x = decal.x;\n"
"			tmp.y = val.w + decal.y;\n"
"			c += sample(0,tmp.xy);\n"

"			tmp.x = val.z + decal.x;\n"
"			tmp.y = decal.y;\n"
"			c += sample(0,tmp.xy);\n"

"			c += sample(0,decal.xy);\n"

"			col.rgb += c.rgb * val.yyy;\n"

"			val.xz += coef.yx;\n"

"		endwhile;\n"

"		Out.rgb = col.rgb;\n"
"		Out.a = 1.0;\n"

"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_quadglow2=
"[VERTEXFORMAT]\n"
"    XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"    TEXTURE Tex;\n"
"    MATRIX PROJ;\n"
"    VECTOR ALPHA;\n"
"    PSVECTOR PARAM;\n"
"    PSCONST pszero;\n"
"    PSCONST psone=1.0,1.0,1.0,1.0;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"
"    [POSITION]\n"
"        oPos = iPos *4 PROJ;\n"
"    [DIFFUSE]\n"
"        oDiffuse = iDiffuse;\n"
"    [MAPPING0]\n"
"        oTexture0.xy = iTexture0.xy;\n"
"        oTexture0.z = ALPHA.x;\n"
//"    [MAPPING1]\n"
//"        oTexture1 = PARAM;\n"
"    [SHADER]\n"
"        map = coord(Tex0);\n"
//"        coef = coord(Tex1);\n"
"        coef = PARAM;\n"
"        col = pszero;\n"
"        val = pszero;\n"

//    Quad(x,y,sx,sy,    0.0f+decal,    0.0f+decal,    1.0f,        1.0f,        r,g,b,a);
//    Quad(x,y,sx,sy,    0.0f,        0.0f+decal,    1.0f-decal,    1.0f,        r,g,b,a);
//    Quad(x,y,sx,sy,    0.0f+decal,    0.0f,        1.0f,        1.0f-decal,    r,g,b,a);
//    Quad(x,y,sx,sy,    0.0f,        0.0f,        1.0f-decal,    1.0f-decal,    r,g,b,a);

"        while (val.x<1.0);\n"

"            val.w = val.z * coef.w;\n"

"            decal.xy = map.xy * (psone.xy - val.zw);\n"

"            val.y = 1.0 - val.x;\n"
"            val.y = coef.z * val.y;\n"

"            tmp.xy = val.zw + decal.xy;\n"
"            cc = sample(0,tmp.xy);\n"
"            c = cc * cc;\n"
"            tmp.x = decal.x;\n"
"            tmp.y = val.w + decal.y;\n"
"            cc = sample(0,tmp.xy);\n"
"            c += cc * cc;\n"
"            tmp.x = val.z + decal.x;\n"
"            tmp.y = decal.y;\n"
"            cc = sample(0,tmp.xy);\n"
"            c += cc * cc;\n"
"            cc = sample(0,decal.xy);\n"
"            c += cc * cc;\n"
"            col.rgb += c.rgb * val.yyy;\n"

"            val.xz += coef.yx;\n"

"        endwhile;\n"

"        Out.rgb = col.rgb;\n"
"        Out.a = 1.0;\n"

"    [RENDER_STATE]\n"
"        Texture[0] Tex\n"
"        TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_quad_blend=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX PROJ;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 PROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"		Out = sample(0,Tex0);\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"		Out.a = 1.0;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_quad_snd=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX PROJ;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 PROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"		Out = sample(0,Tex0);\n"
"       Out = Out * Diffuse;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_quad_alphatest=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX PROJ;\n"
"	VECTOR ALPHA;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 PROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"		oTexture0.z = ALPHA.x;\n"
"	[SHADER]\n"
"		tmp = coord(Tex0);\n"
"		Out = sample(0,tmp.xy);\n"
"       Out = Out * Diffuse;\n"
"		if (Out.a<tmp.z) discard;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_quad2=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	TEXTURE Tex2;\n"
"	MATRIX PROJ;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 PROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[SHADER]\n"
"		col1 = sample(0,Tex0);\n"
"		col2 = sample(1,Tex1);\n"
"		tmp = col1 * col2;\n"
"		Out = tmp * Diffuse;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		Texture[1] Tex2\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_quadblur=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1 TEX2 TEX3\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX PROJ;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 PROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[MAPPING2]\n"
"		oTexture2.xy = iTexture2.xy;\n"
"	[MAPPING3]\n"
"		oTexture3.xy = iTexture3.xy;\n"
"	[SHADER]\n"
"		col1 = sample(0,Tex0);\n"
"		col2 = sample(0,Tex1);\n"
"		col3 = sample(0,Tex2);\n"
"		col4 = sample(0,Tex3);\n"
"		Out = col1 + col2 + col3 + col4;\n"
"		Out = Out * Diffuse;\n"
"		Out.a = 1.0;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"		TextureCoordinate[2] TexCoo2\n"
"		TextureCoordinate[3] TexCoo3\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// diffuse only object
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_diffuse_nomap=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE\n"
"[DEFINES]\n"
"	MATRIX MODEL;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 MODEL;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[SHADER]\n"
"		Out = Diffuse;\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// diffuse texture object
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_diffuse=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		pos = iPos *4 WORLD;\n"
"		oPos = pos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"		Out = sample(0,Tex0);\n"
"		Out = Out * Diffuse;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_diffuse_model=
"[VERTEXFORMAT]\n"
"    XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"    TEXTURE Tex;\n"
"    MATRIX MODEL;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"
"    [POSITION]\n"
"        oPos = iPos *4 MODEL;\n"
"    [DIFFUSE]\n"
"        oDiffuse = iDiffuse;\n"
"    [MAPPING0]\n"
"        oTexture0.xy = iTexture0.xy;\n"
"    [SHADER]\n"
"        Out = sample(0,Tex0);\n"
"        Out = Out * Diffuse;\n"
"    [RENDER_STATE]\n"
"        Texture[0] Tex\n"
"        TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_diffuse_alphatest=
"[VERTEXFORMAT]\n"
"    XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"    TEXTURE Tex;\n"
"    MATRIX WORLD;\n"
"    MATRIX VIEWPROJ;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"
"    [POSITION]\n"
"        pos = iPos *4 WORLD;\n"
"        oPos = pos *4 VIEWPROJ;\n"
"    [DIFFUSE]\n"
"        oDiffuse = iDiffuse;\n"
"    [MAPPING0]\n"
"        oTexture0.xy = iTexture0.xy;\n"
"    [SHADER]\n"
"        Out = sample(0,Tex0);\n"
"        if (Out.a<0.0625) discard;\n"
"        Out = Out * Diffuse;\n"
"    [RENDER_STATE]\n"
"        Texture[0] Tex\n"
"        TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_diffuse_alphatest_model=
"[VERTEXFORMAT]\n"
"    XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"    TEXTURE Tex;\n"
"    MATRIX MODEL;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"
"    [POSITION]\n"
"        oPos = iPos *4 MODEL;\n"
"    [DIFFUSE]\n"
"        oDiffuse = iDiffuse;\n"
"    [MAPPING0]\n"
"        oTexture0.xy = iTexture0.xy;\n"
"    [SHADER]\n"
"        Out = sample(0,Tex0);\n"
"        if (Out.a<0.0625) discard;\n"
"        Out = Out * Diffuse;\n"
"    [RENDER_STATE]\n"
"        Texture[0] Tex\n"
"        TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// multitexture mod mod
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_multitexture_mod_mod=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1\n"
"[DEFINES]\n"
"	TEXTURE Tex1;\n"
"	TEXTURE Tex2;\n"
"	MATRIX MODEL;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 MODEL;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[SHADER]\n"
"		col1 = sample(0,Tex0);\n"
"		col2 = sample(1,Tex1);\n"
"		Out = col1 * col2;\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex1\n"
"		Texture[1] Tex2\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_multitexture_mod_mod_at=
	"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1\n"
"[DEFINES]\n"
"	TEXTURE Tex1;\n"
"	TEXTURE Tex2;\n"
"	MATRIX MODEL;\n"
"	VECTOR ALPHA;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 MODEL;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"		oTexture0.z = ALPHA.x;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[SHADER]\n"
"		tmp = coord(Tex0);\n"
"		col1 = sample(0,tmp.xy);\n"
"		col2 = sample(1,Tex1);\n"
"		Out = col1 * col2;\n"
"		Out = Out * Diffuse;\n"
"		if (Out.a<tmp.z) discard;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex1\n"
"		Texture[1] Tex2\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"[END]\n"
"\n";


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// multitexture mod add
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_multitexture_mod_add=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1\n"
"[DEFINES]\n"
"	TEXTURE Tex1;\n"
"	TEXTURE Tex2;\n"
"	MATRIX MODEL;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 MODEL;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[SHADER]\n"
"		col1 = sample(0,Tex0);\n"
"		col2 = sample(1,Tex1);\n"
"		Out = col1 * Diffuse;\n"
"		Out = Out + col2;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex1\n"
"		Texture[1] Tex2\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_multitexture_mod_add_at=
	"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1\n"
"[DEFINES]\n"
"	TEXTURE Tex1;\n"
"	TEXTURE Tex2;\n"
"	MATRIX MODEL;\n"
"	VECTOR ALPHA;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 MODEL;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"		oTexture0.z = ALPHA.x;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[SHADER]\n"
"		tmp = coord(Tex0);\n"
"		col1 = sample(0,tmp.xy);\n"
"		col2 = sample(1,Tex1);\n"
"		Out = col1 * Diffuse;\n"
"		Out = Out + col2;\n"
"		if (Out.a<tmp.z) discard;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex1\n"
"		Texture[1] Tex2\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"[END]\n"
"\n";


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// multitexture add mod
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_multitexture_add_mod=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1\n"
"[DEFINES]\n"
"	TEXTURE Tex1;\n"
"	TEXTURE Tex2;\n"
"	MATRIX MODEL;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 MODEL;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[SHADER]\n"
"		col1 = sample(0,Tex0);\n"
"		col2 = sample(1,Tex1);\n"
"		Out = col1 + Diffuse;\n"
"		Out = Out * col2;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex1\n"
"		Texture[1] Tex2\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_multitexture_add_mod_at=
	"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1\n"
"[DEFINES]\n"
"	TEXTURE Tex1;\n"
"	TEXTURE Tex2;\n"
"	MATRIX MODEL;\n"
"	VECTOR ALPHA;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 MODEL;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"		oTexture0.z = ALPHA.x;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[SHADER]\n"
"		tmp = coord(Tex0);\n"
"		col1 = sample(0,tmp.xy);\n"
"		col2 = sample(1,Tex1);\n"
"		Out = col1 + Diffuse;\n"
"		Out = Out * col2;\n"
"		if (Out.a<tmp.z) discard;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex1\n"
"		Texture[1] Tex2\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// multitexture add mod
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_multitexture_add_add=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1\n"
"[DEFINES]\n"
"	TEXTURE Tex1;\n"
"	TEXTURE Tex2;\n"
"	MATRIX MODEL;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 MODEL;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[SHADER]\n"
"		col1 = sample(0,Tex0);\n"
"		col2 = sample(1,Tex1);\n"
"		Out = col1 + Diffuse;\n"
"		Out = Out + col2;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex1\n"
"		Texture[1] Tex2\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_multitexture_add_add_at=
	"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1\n"
"[DEFINES]\n"
"	TEXTURE Tex1;\n"
"	TEXTURE Tex2;\n"
"	MATRIX MODEL;\n"
"	VECTOR ALPHA;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 MODEL;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"		oTexture0.z = ALPHA.x;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[SHADER]\n"
"		tmp = coord(Tex0);\n"
"		col1 = sample(0,tmp.xy);\n"
"		col2 = sample(1,Tex1);\n"
"		Out = col1 + Diffuse;\n"
"		Out = Out + col2;\n"
"		if (Out.a<tmp.z) discard;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex1\n"
"		Texture[1] Tex2\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TNL
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_lighting_8=
"[VERTEXFORMAT]\n"
"	XYZ NORMAL TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	VECTOR LIGHT1;\n"
"	VECTOR LIGHT2;\n"
"	VECTOR LIGHT3;\n"
"	VECTOR LIGHT4;\n"
"	VECTOR LIGHT5;\n"
"	VECTOR LIGHT6;\n"
"	VECTOR LIGHT7;\n"
"	VECTOR LIGHT8;\n"
"	VECTOR COUL1;\n"
"	VECTOR COUL2;\n"
"	VECTOR COUL3;\n"
"	VECTOR COUL4;\n"
"	VECTOR COUL5;\n"
"	VECTOR COUL6;\n"
"	VECTOR COUL7;\n"
"	VECTOR COUL8;\n"
"	VECTOR AMBIENT;\n"
"	CONST zero;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		tN = iNorm *3 WORLD;\n"
"		u = LIGHT1 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL1 * u.xxxx;\n"
"		lighted = max(col,zero);\n"
"		u = LIGHT2 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL2 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT3 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL3 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT4 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL4 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT5 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL5 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT6 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL6 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT7 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL7 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT8 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL8 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		lighted = max(lighted,AMBIENT);\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = lighted;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"		Out = sample(0,Tex0);\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_lighting_8_at=
"[VERTEXFORMAT]\n"
"	XYZ NORMAL TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	VECTOR LIGHT1;\n"
"	VECTOR LIGHT2;\n"
"	VECTOR LIGHT3;\n"
"	VECTOR LIGHT4;\n"
"	VECTOR LIGHT5;\n"
"	VECTOR LIGHT6;\n"
"	VECTOR LIGHT7;\n"
"	VECTOR LIGHT8;\n"
"	VECTOR COUL1;\n"
"	VECTOR COUL2;\n"
"	VECTOR COUL3;\n"
"	VECTOR COUL4;\n"
"	VECTOR COUL5;\n"
"	VECTOR COUL6;\n"
"	VECTOR COUL7;\n"
"	VECTOR COUL8;\n"
"	VECTOR AMBIENT;\n"
"	VECTOR ALPHA;\n"
"	CONST zero;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		tN = iNorm *3 WORLD;\n"
"		u = LIGHT1 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL1 * u.xxxx;\n"
"		lighted = max(col,zero);\n"
"		u = LIGHT2 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL2 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT3 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL3 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT4 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL4 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT5 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL5 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT6 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL6 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT7 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL7 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT8 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL8 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		lighted = max(lighted,AMBIENT);\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = lighted;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"		oTexture0.z = ALPHA.x;\n"
"	[SHADER]\n"
"		tmp = coord(Tex0);\n"
"		Out = sample(0,tmp.xy);\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"		if (Out.a<tmp.z) discard;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_lighting_8_specular=
"[VERTEXFORMAT]\n"
"	XYZ NORMAL TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	VECTOR LIGHT1;\n"
"	VECTOR LIGHT2;\n"
"	VECTOR LIGHT3;\n"
"	VECTOR LIGHT4;\n"
"	VECTOR LIGHT5;\n"
"	VECTOR LIGHT6;\n"
"	VECTOR LIGHT7;\n"
"	VECTOR LIGHT8;\n"
"	VECTOR COUL1;\n"
"	VECTOR COUL2;\n"
"	VECTOR COUL3;\n"
"	VECTOR COUL4;\n"
"	VECTOR COUL5;\n"
"	VECTOR COUL6;\n"
"	VECTOR COUL7;\n"
"	VECTOR COUL8;\n"
"	VECTOR AMBIENT;\n"
"	VECTOR CAMERA;\n"
"	VECTOR POWER;\n"
"	CONST zero;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		tN = iNorm *3 WORLD;\n"
"		vec = CAMERA - tPos;\n"
"		vec = normalize( vec );\n"
"		vec = 2.0*tN + vec;\n"
"		vec = normalize( vec );\n"

"       spec.z = 0.0;\n"

"		v = LIGHT1 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL1 * u.xxxx;\n"
"		lighted = max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL1.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"

"		v = LIGHT2 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL2 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL2.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"

"		v = LIGHT3 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL3 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL3.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"

"		v = LIGHT4 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL4 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL4.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"

"		v = LIGHT5 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL5 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL5.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"

"		v = LIGHT6 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL6 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL6.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"

"		v = LIGHT7 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL7 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL7.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"

"		v = LIGHT8 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL8 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL8.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"

"		spec = clamp(spec.zzzz , 0.0 , 1.0);\n"
"		lighted = max(lighted,AMBIENT);\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = lighted;\n"
"	[SPECULAR]\n"
"		oSpecular = spec;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"		Out = sample(0,Tex0);\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"		Out.rgb = Out.rgb + Specular.rgb;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_lighting_8_specular_at=
"[VERTEXFORMAT]\n"
"	XYZ NORMAL TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	VECTOR LIGHT1;\n"
"	VECTOR LIGHT2;\n"
"	VECTOR LIGHT3;\n"
"	VECTOR LIGHT4;\n"
"	VECTOR LIGHT5;\n"
"	VECTOR LIGHT6;\n"
"	VECTOR LIGHT7;\n"
"	VECTOR LIGHT8;\n"
"	VECTOR COUL1;\n"
"	VECTOR COUL2;\n"
"	VECTOR COUL3;\n"
"	VECTOR COUL4;\n"
"	VECTOR COUL5;\n"
"	VECTOR COUL6;\n"
"	VECTOR COUL7;\n"
"	VECTOR COUL8;\n"
"	VECTOR AMBIENT;\n"
"	VECTOR CAMERA;\n"
"	VECTOR ALPHA;\n"
"	VECTOR POWER;\n"
"	CONST zero;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		tN = iNorm *3 WORLD;\n"
"		vec = CAMERA - tPos;\n"
"		vec = normalize( vec );\n"
"		vec = 2.0*tN + vec;\n"
"		vec = normalize( vec );\n"

"       spec.z = 0.0;\n"

"		v = LIGHT1 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL1 * u.xxxx;\n"
"		lighted = max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL1.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"

"		v = LIGHT2 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL2 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL2.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"


"		v = LIGHT3 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL3 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL3.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"


"		v = LIGHT4 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL4 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL4.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"


"		v = LIGHT5 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL5 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL5.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"


"		v = LIGHT6 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL6 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL6.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"


"		v = LIGHT7 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL7 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL7.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"


"		v = LIGHT8 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL8 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"       spec.x = max(u.x*COUL8.a,0.0);\n"
"       spec.x = pow(spec.x,POWER.x);\n"
"       spec.z +=spec.x;\n"


"		spec = clamp(spec.zzzz , 0.0 , 1.0);\n"
"		lighted = max(lighted,AMBIENT);\n"


"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = lighted;\n"
"	[SPECULAR]\n"
"		oSpecular = spec;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"		oTexture0.z = ALPHA.x;\n"
"	[SHADER]\n"
"		tmp = coord(Tex0);\n"
"		Out = sample(0,tmp.xy);\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"		Out.rgb = Out.rgb + Specular.rgb;\n"
"		if (Out.a<tmp.z) discard;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TNL MORPH
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_lighting_8_specular_morph=
"[VERTEXFORMAT]\n"
"	MORPH\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	VECTOR LIGHT1;\n"
"	VECTOR LIGHT2;\n"
"	VECTOR LIGHT3;\n"
"	VECTOR LIGHT4;\n"
"	VECTOR LIGHT5;\n"
"	VECTOR LIGHT6;\n"
"	VECTOR LIGHT7;\n"
"	VECTOR LIGHT8;\n"
"	VECTOR COUL1;\n"
"	VECTOR COUL2;\n"
"	VECTOR COUL3;\n"
"	VECTOR COUL4;\n"
"	VECTOR COUL5;\n"
"	VECTOR COUL6;\n"
"	VECTOR COUL7;\n"
"	VECTOR COUL8;\n"
"	VECTOR AMBIENT;\n"
"	VECTOR CAMERA;\n"
"	VECTOR POWER;\n"
"	VECTOR Interpolant;\n"
"	CONST zero;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = interpolate(iPos,iPos2,Interpolant,WORLD);\n"
"		tN = normal_interpolate(iNorm,iNorm2,Interpolant,WORLD);\n"

"		vec = CAMERA - tPos;\n"
"		vec = normalize( vec );\n"
"		vec = 2.0*tN + vec;\n"
"		vec = normalize( vec );\n"

"		v = LIGHT1 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL1 * u.xxxx;\n"
"		lighted = max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec = max(u.xxxx,zero);\n"

"		v = LIGHT1 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL1 * u.xxxx;\n"
"		lighted = max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x = max(u.x*COUL1.a,0.0);\n"

"		v = LIGHT2 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL2 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL3.a,0.0);\n"

"		v = LIGHT3 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL3 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL3.a,0.0);\n"

"		v = LIGHT4 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL4 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL4.a,0.0);\n"

"		v = LIGHT5 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL5 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL5.a,0.0);\n"

"		v = LIGHT6 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL6 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL6.a,0.0);\n"

"		v = LIGHT7 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL7 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL7.a,0.0);\n"

"		v = LIGHT8 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL8 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL8.a,0.0);\n"

"		spec.x = pow(spec.x,POWER.x);\n"
"		spec = clamp(spec.xxxx , 0.0 , 1.0);\n"
"		lighted = max(lighted,AMBIENT);\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = lighted;\n"
"	[SPECULAR]\n"
"		oSpecular = spec;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"		Out = sample(0,Tex0);\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"		Out.rgb = Out.rgb + Specular.rgb;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_lighting_8_morph=
"[VERTEXFORMAT]\n"
"	MORPH\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	VECTOR LIGHT1;\n"
"	VECTOR LIGHT2;\n"
"	VECTOR LIGHT3;\n"
"	VECTOR LIGHT4;\n"
"	VECTOR LIGHT5;\n"
"	VECTOR LIGHT6;\n"
"	VECTOR LIGHT7;\n"
"	VECTOR LIGHT8;\n"
"	VECTOR COUL1;\n"
"	VECTOR COUL2;\n"
"	VECTOR COUL3;\n"
"	VECTOR COUL4;\n"
"	VECTOR COUL5;\n"
"	VECTOR COUL6;\n"
"	VECTOR COUL7;\n"
"	VECTOR COUL8;\n"
"	VECTOR AMBIENT;\n"
"	VECTOR Interpolant;\n"
"	CONST zero;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = interpolate(iPos,iPos2,Interpolant,WORLD);\n"
"		tN = normal_interpolate(iNorm,iNorm2,Interpolant,WORLD);\n"

"		u = LIGHT1 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL1 * u.xxxx;\n"
"		lighted = max(col,zero);\n"
"		u = LIGHT2 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL2 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT3 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL3 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT4 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL4 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT5 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL5 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT6 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL6 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT7 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL7 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT8 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL8 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		lighted = max(lighted,AMBIENT);\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = lighted;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"		Out = sample(0,Tex0);\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_lighting_8_specular_morph_at=
"[VERTEXFORMAT]\n"
"	MORPH\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	VECTOR LIGHT1;\n"
"	VECTOR LIGHT2;\n"
"	VECTOR LIGHT3;\n"
"	VECTOR LIGHT4;\n"
"	VECTOR LIGHT5;\n"
"	VECTOR LIGHT6;\n"
"	VECTOR LIGHT7;\n"
"	VECTOR LIGHT8;\n"
"	VECTOR COUL1;\n"
"	VECTOR COUL2;\n"
"	VECTOR COUL3;\n"
"	VECTOR COUL4;\n"
"	VECTOR COUL5;\n"
"	VECTOR COUL6;\n"
"	VECTOR COUL7;\n"
"	VECTOR COUL8;\n"
"	VECTOR AMBIENT;\n"
"	VECTOR CAMERA;\n"
"	VECTOR POWER;\n"
"	VECTOR Interpolant;\n"
"	VECTOR ALPHA;\n"
"	CONST zero;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = interpolate(iPos,iPos2,Interpolant,WORLD);\n"
"		tN = normal_interpolate(iNorm,iNorm2,Interpolant,WORLD);\n"

"		vec = CAMERA - tPos;\n"
"		vec = normalize( vec );\n"
"		vec = 2.0*tN + vec;\n"
"		vec = normalize( vec );\n"

"		v = LIGHT1 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL1 * u.xxxx;\n"
"		lighted = max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec = max(u.xxxx,zero);\n"

"		v = LIGHT1 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL1 * u.xxxx;\n"
"		lighted = max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x = max(u.x*COUL1.a,0.0);\n"

"		v = LIGHT2 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL2 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL3.a,0.0);\n"

"		v = LIGHT3 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL3 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL3.a,0.0);\n"

"		v = LIGHT4 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL4 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL4.a,0.0);\n"

"		v = LIGHT5 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL5 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL5.a,0.0);\n"

"		v = LIGHT6 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL6 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL6.a,0.0);\n"

"		v = LIGHT7 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL7 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL7.a,0.0);\n"

"		v = LIGHT8 - tPos;\n"
"		v = normalize( v );\n"
"		u.x = (v | tN);\n"
"		col = COUL8 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u.x = ( vec | v );\n"
"		spec.x += max(u.x*COUL8.a,0.0);\n"

"		spec.x = pow(spec.x,POWER.x);\n"
"		spec = clamp(spec.xxxx , 0.0 , 1.0);\n"
"		lighted = max(lighted,AMBIENT);\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = lighted;\n"
"	[SPECULAR]\n"
"		oSpecular = spec;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"		oTexture0.z = ALPHA.x;\n"
"	[SHADER]\n"
"		tmp = coord(Tex0);\n"
"		Out = sample(0,tmp.xy);\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"		Out.rgb = Out.rgb + Specular.rgb;\n"
"		if (Out.a<tmp.z) discard;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_lighting_8_morph_at=
"[VERTEXFORMAT]\n"
"	MORPH\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	VECTOR LIGHT1;\n"
"	VECTOR LIGHT2;\n"
"	VECTOR LIGHT3;\n"
"	VECTOR LIGHT4;\n"
"	VECTOR LIGHT5;\n"
"	VECTOR LIGHT6;\n"
"	VECTOR LIGHT7;\n"
"	VECTOR LIGHT8;\n"
"	VECTOR COUL1;\n"
"	VECTOR COUL2;\n"
"	VECTOR COUL3;\n"
"	VECTOR COUL4;\n"
"	VECTOR COUL5;\n"
"	VECTOR COUL6;\n"
"	VECTOR COUL7;\n"
"	VECTOR COUL8;\n"
"	VECTOR AMBIENT;\n"
"	VECTOR Interpolant;\n"
"	VECTOR ALPHA;\n"
"	CONST zero;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = interpolate(iPos,iPos2,Interpolant,WORLD);\n"
"		tN = normal_interpolate(iNorm,iNorm2,Interpolant,WORLD);\n"

"		u = LIGHT1 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL1 * u.xxxx;\n"
"		lighted = max(col,zero);\n"
"		u = LIGHT2 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL2 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT3 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL3 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT4 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL4 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT5 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL5 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT6 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL6 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT7 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL7 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		u = LIGHT8 - tPos;\n"
"		u = normalize( u );\n"
"		u.x = (u | tN);\n"
"		col = COUL8 * u.xxxx;\n"
"		lighted += max(col,zero);\n"
"		lighted = max(lighted,AMBIENT);\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = lighted;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"		oTexture0.z = ALPHA.x;\n"
"	[SHADER]\n"
"		tmp = coord(Tex0);\n"
"		Out = sample(0,tmp.xy);\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"		if (Out.a<tmp.z) discard;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STENCIL SHADOWS
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * script_hll_stencil_alternative = 
"[VERTEXFORMAT]\n"
"	XYZ NORMAL TEX0\n"
"[DEFINES]\n"
"	VECTOR Light;\n"
"	VECTOR VAR;\n"
"	MATRIX VIEWPROJ;\n"
"	MATRIX VIEW;\n"
"	MATRIX WORLD;\n"
"	MATRIX PROJNEARPLANE;\n"
"	CONST zero;\n"

	 "[TECHNIQUE]\n"
	 "[PASS0]\n"
	 "	[POSITION]\n"
	 "		tmp = iPos *4 WORLD;\n"
	 "		N = iNorm *3 WORLD;\n"
	 "		u = tmp - Light;\n"
	 "		u = normalize( u );\n"
	 "		u.w = zero.x;\n"
	 "		s.x = (u | N);\n"
	 "		s.x = slt( s.x , VAR.y );\n"
	 "		s.x = s.x * iTexture0.x * VAR.x;\n"
	 "		u = tmp + s.xxxx * u;\n"

	 "		s = u *4 VIEW;\n"
	 "		p = u;\n"

	 "		if ( s.z > VAR.z )\n"
	 "		{\n"
	 "			p = u;\n"
	 "		}\n"
	 "		else\n"
	 "		{\n"
	 "			p = u *4 PROJNEARPLANE;\n"
	 "		}\n"

	 "		oPos = p *4 VIEWPROJ;\n"	 
	 "	[RENDER_STATE]\n"
	 "		TextureCoordinate[0]	TexCoo0\n"

"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * script_hll_stencil_simple = 
"[VERTEXFORMAT]\n"
"	XYZ NORMAL TEX0\n"
"[DEFINES]\n"
"	VECTOR Light;\n"
"	VECTOR VAR;\n"
"	MATRIX VIEWPROJ;\n"
"	MATRIX WORLD;\n"

"	CONST zero;\n"

	 "[TECHNIQUE]\n"
	 "[PASS0]\n"
	 "	[POSITION]\n"
	 "		tmp = iPos *4 WORLD;\n"
	 "		N = iNorm *3 WORLD;\n"
	 "		u = tmp - Light;\n"
	 "		u = normalize( u );\n"
	 "		u.w = zero.x;\n"
	 "		s.x = (u | N);\n"
	 "		s.x = slt( s.x , VAR.y );\n"
	 "		s.x = s.x * iTexture0.x * VAR.x;\n"
	 "		p = tmp + s.xxxx * u;\n"
	 "		oPos = p *4 VIEWPROJ;\n"
	 "	[RENDER_STATE]\n"
	 "		TextureCoordinate[0]	TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * script_hll_stencil_alternative_morph = 
"[VERTEXFORMAT]\n"
"	MORPH\n"
"[DEFINES]\n"
"	VECTOR Light;\n"
"	VECTOR VAR;\n"
"	MATRIX VIEWPROJ;\n"
"	MATRIX VIEW;\n"
"	MATRIX WORLD;\n"
"	MATRIX PROJNEARPLANE;\n"
"	VECTOR Interpolant;\n"
"	CONST zero;\n"
	 "[TECHNIQUE]\n"
	 "[PASS0]\n"
	 "	[POSITION]\n"
 	 "		tmp = interpolate(iPos,iPos2,Interpolant,WORLD);\n"
	 "		N = normal_interpolate(iNorm,iNorm2,Interpolant,WORLD);\n"
	 "		u = tmp - Light;\n"
	 "		u = normalize( u );\n"
	 "		u.w = zero.x;\n"
	 "		s.x = (u | N);\n"
	 "		s.x = slt( s.x , VAR.y );\n"
	 "		s.x = s.x * iTexture0.x * VAR.x;\n"
	 "		u = tmp + s.xxxx * u;\n"
	 "		s = u *4 VIEW;\n"
	 "		p = u;\n"
	 "		if ( s.z > VAR.z )\n"
	 "		{\n"
	 "			p = u;\n"
	 "		}\n"
	 "		else\n"
	 "		{\n"
	 "			p = u *4 PROJNEARPLANE;\n"
	 "		}\n"
	 "		oPos = p *4 VIEWPROJ;\n"
	 "	[RENDER_STATE]\n"
	 "		TextureCoordinate[0]	TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * script_hll_stencil_simple_morph = 
"[VERTEXFORMAT]\n"
"	MORPH\n"
"[DEFINES]\n"
"	VECTOR Light;\n"
"	VECTOR VAR;\n"
"	MATRIX VIEWPROJ;\n"
"	MATRIX WORLD;\n"
"	VECTOR Interpolant;\n"
"	CONST zero;\n"
	 "[TECHNIQUE]\n"
	 "[PASS0]\n"
	 "	[POSITION]\n"
 	 "		tmp = interpolate(iPos,iPos2,Interpolant,WORLD);\n"
	 "		N = normal_interpolate(iNorm,iNorm2,Interpolant,WORLD);\n"
	 "		u = tmp - Light;\n"
	 "		u = normalize( u );\n"
	 "		u.w = zero.x;\n"
	 "		s.x = (u | N);\n"
	 "		s.x = slt( s.x , VAR.y );\n"
	 "		s.x = s.x * iTexture0.x * VAR.x;\n"
	 "		p = tmp + s.xxxx * u;\n"
	 "		oPos = p *4 VIEWPROJ;\n"
	 "	[RENDER_STATE]\n"
	 "		TextureCoordinate[0]	TexCoo0\n"
"[END]\n"
"\n";


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BASIC ENV MAP
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_envmap1=
"[VERTEXFORMAT]\n"
"	XYZ NORMAL TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	TEXTURE Env;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	MATRIX MATLIGHT;\n"
"	VECTOR CAMERA;\n"
"	VECTOR VECLIGHT;\n"
"   VECTOR FactorMap;\n"
"	CONST zero;\n"
//"	CONST val=0.5,0.75,0.0,0.5;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		N = iNorm *3 WORLD;\n"
"		N = -N;\n"
"		tmp = N *3 MATLIGHT;\n"
"		u.x = 0.5 + tmp.x * 0.5;\n"
"		u.y = 0.5 + FactorMap.y * tmp.y * 0.5;\n"
"		u.zw = zero.xx;\n"
"		tmp.x = (N|VECLIGHT);\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse.xyz = tmp.xxx;\n"
"		oDiffuse.w = 1.0;\n"
"	[MAPPING0]\n"
"		oTexture0 = u;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"		col2 = sample(1,Tex1);\n"
"		if (col2.a<0.0313) discard;\n"
"		col1 = sample(0,Tex0);\n"
"		col1 = col1 * Diffuse;\n"
"		Out.rgb = col1.rgb + col2.rgb;\n"
"		Out.a = col2.a;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Env\n"
"		Texture[1] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_envmap1_morph=
"[VERTEXFORMAT]\n"
"	MORPH\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	TEXTURE Env;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	MATRIX MATLIGHT;\n"
"	VECTOR CAMERA;\n"
"	VECTOR VECLIGHT;\n"
"	VECTOR Interpolant;\n"
"   VECTOR FactorMap;\n"
"	CONST zero;\n"
//"	CONST val=0.5,0.75,0.0,0.5;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = interpolate(iPos,iPos2,Interpolant,WORLD);\n"
"		N = normal_interpolate(iNorm,iNorm2,Interpolant,WORLD);\n"
"		N = -N;\n"
"		tmp = N *3 MATLIGHT;\n"
"		u.x = 0.5 + tmp.x * 0.5;\n"
"		u.y = 0.5 + FactorMap.y * tmp.y * 0.5;\n"
"		u.zw = zero.xx;\n"
"		tmp.x = (N|VECLIGHT);\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse.xyz = tmp.xxx;\n"
"		oDiffuse.w = 1.0;\n"
"	[MAPPING0]\n"
"		oTexture0 = u;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"		col2 = sample(1,Tex1);\n"
"		if (col2.a<0.0313) discard;\n"
"		col1 = sample(0,Tex0);\n"
"		col1 = col1 * Diffuse;\n"
"		Out.rgb = col1.rgb + col2.rgb;\n"
"		Out.a = col2.a;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Env\n"
"		Texture[1] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_envmap2=
"[VERTEXFORMAT]\n"
"	XYZ NORMAL TEX0\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	TEXTURE Env;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	MATRIX MATLIGHT;\n"
"	VECTOR CAMERA;\n"
"	VECTOR VECLIGHT;\n"
"	VECTOR VECLIGHT2;\n"
"	VECTOR AMBIENT;\n"
"   VECTOR FactorMap;\n"
"	CONST zero;\n"
"	CONST one=1.0,1.0,1.0,1.0;\n"
//"	CONST val=0.5,0.75,0.0,0.5;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		N = iNorm *3 WORLD;\n"
"		N = -N;\n"
"		tmp.x = (N | VECLIGHT);\n"
"		tmp.y = (N | VECLIGHT2);\n"
"		v = tPos - CAMERA;\n"
"		v = normalize( v );\n"
"		v += 2.0 * N;\n"
"		v = normalize( v );\n"
"		v = -v;\n"
"		v = v *3 MATLIGHT;\n"
"		u.x = 0.5 + v.x * 0.5;\n"
"		u.y = 0.5 + FactorMap.y * v.y * 0.5;\n"
"		u.zw = zero.xx;\n"
"       col1 = tmp.xxxx;\n"
"       col2 = tmp.yyyy;\n"
"       tmp = min( col1+col2, one );\n"
"       tmp = max( tmp, AMBIENT );\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse.xyz = tmp.xyz;\n"
"		oDiffuse.w = 1.0;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1 = u;\n"
"	[SHADER]\n"
"		col1 = sample(0,Tex0);\n"
"		if (col1.a<0.0313) discard;\n"
"		col2 = sample(1,Tex1);\n"
"		col2 = col2 * Diffuse;\n"
"		Out.rgb = col1.rgb + col2.rgb;\n"
"		Out.a = col1.a;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		Texture[1] Env\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_envmap2_morph=
"[VERTEXFORMAT]\n"
"	MORPH\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	TEXTURE Env;\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	MATRIX MATLIGHT;\n"
"	VECTOR CAMERA;\n"
"	VECTOR VECLIGHT;\n"
"	VECTOR VECLIGHT2;\n"
"	VECTOR AMBIENT;\n"
"	VECTOR Interpolant;\n"
"   VECTOR FactorMap;\n"
"	CONST zero;\n"
"	CONST one=1.0,1.0,1.0,1.0;\n"
//"	CONST val=0.5,0.75,0.0,0.5;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = interpolate(iPos,iPos2,Interpolant,WORLD);\n"
"		N = normal_interpolate(iNorm,iNorm2,Interpolant,WORLD);\n"
"		N = -N;\n"
"		tmp.x = (N | VECLIGHT);\n"
"		tmp.y = (N | VECLIGHT2);\n"
"		v = tPos - CAMERA;\n"
"		v = normalize( v );\n"
"		v += 2.0 * N;\n"
"		v = normalize( v );\n"
"		v = -v;\n"
"		v = v *3 MATLIGHT;\n"
"		u.x = 0.5 + v.x * 0.5;\n"
"		u.y = 0.5 + FactorMap.y * v.y * 0.5;\n"
"		u.zw = zero.xx;\n"
"       col1 = tmp.xxxx;\n"
"       col2 = tmp.yyyy;\n"
"       tmp = min( col1+col2, one );\n"
"       tmp = max( tmp, AMBIENT );\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse.xyz = tmp.xyz;\n"
"		oDiffuse.w = 1.0;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1 = u;\n"
"	[SHADER]\n"
"		col1 = sample(0,Tex0);\n"
"		if (col1.a<0.0313) discard;\n"
"		col2 = sample(1,Tex1);\n"
"		col2 = col2 * Diffuse;\n"
"		Out.rgb = col1.rgb + col2.rgb;\n"
"		Out.a = col1.a;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Tex\n"
"		Texture[1] Env\n"
"		TextureCoordinate[0] TexCoo0\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BUMP MAPPING
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_bump_mapping_anim=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1 TEX2\n"
"[DEFINES]\n"

"	VECTOR vecLight1;\n"
"	VECTOR vecLight2;\n"
"	VECTOR vecLight3;\n"

"	VECTOR vecVar1;\n"
"	VECTOR vecVar2;\n"
"	VECTOR vecVar3;\n"

"	TEXTURE tex;\n"
"	TEXTURE lightmap;\n"
"	TEXTURE vectors;\n"
"	TEXTURE bump;\n"

"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"

//"	CONST zero;\n"
"	CONST one=1.0,1.0,1.0,1.0;\n"

"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		val1 = vecLight1 - tPos;\n"
"		val2 = vecLight2 - tPos;\n"
"		val3 = vecLight3 - tPos;\n"
"		val1.x = inv( val1 );\n"
"		val2.x = inv( val2 );\n"
"		val3.x = inv( val3 );\n"
"		val1 = vecVar1 * val1.xxxx;\n"
"		val2 = vecVar2 * val2.xxxx;\n"
"		val3 = vecVar3 * val3.xxxx;\n"
"		col = val1 + val2 + val3;\n"
"		col = one - col;\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse.xyz = col.xxx;\n"
"		oDiffuse.w = 1.0;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[MAPPING2]\n"
"		oTexture2.xy = iTexture2.xy;\n"
"	[SHADER]\n"
"		r5 = coord(Tex0);\n"
"		r5.xy = fractionnal( r5.xy );\n"
"		Out = sample(0, r5.xy);\n"
"		r1 = sample(1, Tex1);\n"
"		r2 = sample(2, Tex2);\n"
"		r3 = sample(3, r5.xy);\n"
"		r5 = dotbx2(r3 , r2);\n"
"		Out.rgb = Out.rgb * r1.rgb;\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"		Out.rgb = 2.0 * Out.rgb * r5.xxx;\n"
"	[RENDER_STATE]\n"
"		Texture[0] tex\n"
"		Texture[1] lightmap\n"
"		Texture[2] vectors\n"
"		Texture[3] bump\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"		TextureCoordinate[2] TexCoo2\n"
"		Mip[0] Linear\n"
"		Mip[1] Point\n"
"		Mip[2] Point\n"
"		Mip[3] Linear\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_bump_mapping=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1 TEX2\n"
"[DEFINES]\n"

"	TEXTURE tex;\n"
"	TEXTURE lightmap;\n"
"	TEXTURE vectors;\n"
"	TEXTURE bump;\n"

"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"

//"	CONST zero;\n"
//"	CONST one=1.0,1.0,1.0,1.0;\n"

"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[MAPPING2]\n"
"		oTexture2.xy = iTexture2.xy;\n"
"	[SHADER]\n"
"		r5 = coord(Tex0);\n"
"		r5.xy = fractionnal( r5.xy );\n"
"		Out = sample(0, r5.xy);\n"
"		r1 = sample(1, Tex1);\n"
"		r2 = sample(2, Tex2);\n"
"		r3 = sample(3, r5.xy);\n"
"		r5 = dotbx2(r3 , r2);\n"
"		Out.rgb = Out.rgb * r1.rgb;\n"
"		Out.rgb = 2.0 * Out.rgb * r5.xxx;\n"

"	[RENDER_STATE]\n"
"		Texture[0] tex\n"
"		Texture[1] lightmap\n"
"		Texture[2] vectors\n"
"		Texture[3] bump\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"		TextureCoordinate[2] TexCoo2\n"
"		Mip[0] Linear\n"
"		Mip[1] Point\n"
"		Mip[2] Point\n"
"		Mip[3] Linear\n"
"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_bump_mapping_s=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1 TEX2\n"
"[DEFINES]\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
//"	CONST zero;\n"
//"	CONST one=1.0,1.0,1.0,1.0;\n"
"	PSCONST pscolor=0.0,0.0,0.0,1.0;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[SHADER]\n"
"		Out = pscolor;\n"
"	[RENDER_STATE]\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"		TextureCoordinate[2] TexCoo2\n"
"[END]\n"
"\n";


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BUMP MAPPING DISPLACEMENT
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_bump_mapping_displacement=
"[VERTEXFORMAT]\n"
"	XYZ NORMAL DIFFUSE TEX0 TEX1 TEX2 TEX3\n"
"[DEFINES]\n"

"	VECTOR vecLight1;\n"
"	VECTOR vecLight2;\n"
"	VECTOR vecLight3;\n"

"	VECTOR vecVar1;\n"
"	VECTOR vecVar2;\n"
"	VECTOR vecVar3;\n"

"	TEXTURE tex;\n"
"	TEXTURE lightmap;\n"
"	TEXTURE vectors;\n"
"	TEXTURE bump;\n"
"	TEXTURE displace;\n"
"	TEXTURE horizon;\n"

"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"

"	VECTOR Eye;\n"

//"	CONST zero;\n"
"	CONST one=1.0,1.0,1.0,1.0;\n"
"	CONST up=0.0,-1.0,0.0,0.0;\n"
"	CONST up2=0.0,0.0,-1.0,0.0;\n"
"	PSCONST c0=0.04,0.04,0.04,0.04;\n"
"	PSCONST c1=0.5,0.5,0.5,0.5;\n"

//"	PSCONST cc0=0.04,0.04,0.04,0.04;\n"
"	PSCONST cc1=0.5,0.5,0.5,0.5;\n"
"	PSCONST cc2=0.0,0.0,0.0,0.0;\n"
"	PSCONST cc3=1.0,1.0,1.0,1.0;\n"
//"	PSCONST cc4=0.5,0.5,0.5,0.5;\n"

"[TECHNIQUE]\n"
"[PASS0]\n"
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		tN = iNorm *3 WORLD;\n"
"		r4 = Eye - tPos;\n"
"		r4 = normalize( r4 );\n"
"		r6 = vec4(-tN.z,0,tN.x,0);\n"	
"		r7 = vec4(tN.y,-tN.x,0,0);\n"	
"		r9.xy = vec2( -tN.y, tN.y);\n"
"		if (r9.x<0.0) r9.x = r9.y;\n"
"		r9.x = 1.0 - r9.x;\n"
"		if (r9.x<0.025) r6 = r7;\n"
"		r7 = tN ^ r6;\n"
"		u.x = ( r4 | tN );\n"
"		u.y = ( r4 | r6 );\n"
"		u.z = ( r4 | r7 );\n"
"		u.w = 0.0;\n"
"		val1 = vecLight1 - tPos;\n"
"		val2 = vecLight2 - tPos;\n"
"		val3 = vecLight3 - tPos;\n"
"		val1.x = inv( val1 );\n"
"		val2.x = inv( val2 );\n"
"		val3.x = inv( val3 );\n"
"		val1 = vecVar1 * val1.xxxx;\n"
"		val2 = vecVar2 * val2.xxxx;\n"
"		val3 = vecVar3 * val3.xxxx;\n"
"		col = val1 + val2 + val3;\n"
"		col = one - col;\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse.xyz = col.xxx;\n"
"		oDiffuse.w = 1.0;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[MAPPING2]\n"
"		oTexture2.xy = iTexture2.xy;\n"
"	[MAPPING3]\n"
"		u.x = u.y;\n"
"		u.y = u.z;\n"
"		u.xy = u.xy * iTexture3.xy;\n"
"		oTexture3.xy = u.xy;\n"
"	[MAPPING4]\n"
"		oTexture4.xy = iTexture3.xy;\n"
"	[SHADER]\n"
"		r8 = sample(3,Tex0);\n"
"		r4 = coord(Tex3);\n"
"		r5 = coord(Tex0);\n"
"		r3 = coord(Tex4);\n"
"		r1.a = c0.x * bx2(r8.a);\n"
"		r5.r += r1.a * r4.r;\n"
"		r5.g -= r1.a * r4.g;\n"
"		r5.xy = fractionnal( r5.xy );\n"
"		r7 = sample(0,r5.xy);\n"
"		r1 = sample(1,Tex1);\n"
"		r2 = sample(2,Tex2);\n"
"		r4 = sample(4,r5.xy);\n"
"		r7 = r7 * r1;\n"
"		r7 = r7 * Diffuse;\n"
"		r6.rgb = bx2(r4.rgb) - c1.rgb * bx2( r2.rgb );\n"
"		r3.x = dot( r3, r6 );\n"
"		r3 = saturate( r3.xxxx );\n"
"		r3 = r3 * r3;\n"
"		r1 = dotbx2( r4, r2 );\n"
// bump mapping displace
"		r7.rgb = 2.0 * r7.rgb * r1.xxx;\n"
"		r7.a = (1.0 - r7.a)*r1.r;\n"
"		r7.rgb += r7.rgb * r3.rgb;\n"
// self shadowing
"		r6 = sample( 2,Tex1 );\n"
"		r4 = coord( Tex3 );\n"
"		r1 = bx2(r6);\n"
"		r1.b = -r1.r;\n"
"		r6 = sample( 5,r5.xy);\n"
"		r1.a = - r1.g;\n"
"		r3 = r1 - r6;\n"
"		r3 = compare( r3, cc3, cc2 );\n"
"		r6.a = dot4(cc1,r3);\n"
"		Out.rgb = mix(r7.rgb, cc2.rgb, r6.aaa);\n"
"		Out.a = r7.a;\n"
"	[RENDER_STATE]\n"
"		Texture[0]	tex\n"
"		Texture[1]	lightmap\n"
"		Texture[2]	vectors\n"
"		Texture[3]	displace\n"
"		Texture[4]	bump\n"
"		Texture[5]	horizon\n"

"		Blend		False\n"

"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"		TextureCoordinate[2] TexCoo2\n"
"		TextureCoordinate[3] TexCoo3\n"

"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_bump_mapping_displacement_s=
"[VERTEXFORMAT]\n"
"	XYZ NORMAL DIFFUSE TEX0 TEX1 TEX2 TEX3\n"
"[DEFINES]\n"
"	MATRIX WORLD;\n"
"	MATRIX VIEWPROJ;\n"
"	VECTOR Eye;\n"
//"	CONST zero;\n"
//"	CONST one=1.0,1.0,1.0,1.0;\n"
"	PSCONST pscolor=0.0,0.0,0.0,1.0;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"
"	[POSITION]\n"
"		tPos = iPos *4 WORLD;\n"
"		oPos = tPos *4 VIEWPROJ;\n"
"	[SHADER]\n"
"		Out = pscolor;\n"
"	[RENDER_STATE]\n"
"		Blend		False\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"		TextureCoordinate[2] TexCoo2\n"
"		TextureCoordinate[3] TexCoo3\n"

"[END]\n"
"\n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_quadbump=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1 TEX2 TEX3\n"
"[DEFINES]\n"
"	TEXTURE Tex;\n"
"	TEXTURE Bump;\n"
"	TEXTURE Colors;\n"
"	TEXTURE Vectors;\n"
"	MATRIX PROJ;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 PROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[MAPPING2]\n"
"		oTexture2.xy = iTexture2.xy;\n"
"	[MAPPING3]\n"
"		oTexture3.xy = iTexture3.xy;\n"
"	[SHADER]\n"
"		col = sample(0,Tex0);\n"
"		bump = sample(1,Tex1);\n"
"		dir = sample(2,Tex2);\n"
"		pix = sample(3,Tex3);\n"
"		tmp = dotbx2(bump,dir);\n"
"		Out.rgb = 2.0 * pix.rgb * tmp.rgb;\n"
"		Out.rgb = Out.rgb * col.rgb;\n"
"		Out.rgb = Out.rgb * Diffuse.rgb;\n"
"		Out.a = Diffuse.a;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Colors\n"
"		Texture[1] Bump\n"
"		Texture[2] Vectors\n"
"		Texture[3] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"		TextureCoordinate[2] TexCoo2\n"
"		TextureCoordinate[3] TexCoo3\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////
char * shader_hll_quadspec=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0 TEX1\n"
"[DEFINES]\n"
"	TEXTURE Bump;\n"
"	TEXTURE Vectors;\n"
"	MATRIX PROJ;\n"
"	PSCONST psm=0.15,0.15;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 PROJ;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[MAPPING1]\n"
"		oTexture1.xy = iTexture1.xy;\n"
"	[SHADER]\n"
"		pix = sample(0,Tex0);\n"
"		coo = coord(Tex1);\n"
"		pix = bx2(pix);\n"
"		coo.xy = coo.xy + psm.xy * pix.xy;\n"
"		Out = sample(1,coo.xy);\n"
"		Out.a = Diffuse.a;\n"
"	[RENDER_STATE]\n"
"		Texture[0] Bump\n"
"		Texture[1] Vectors\n"
"		TextureCoordinate[0] TexCoo0\n"
"		TextureCoordinate[1] TexCoo1\n"
"[END]\n"
"\n";
////////////////////////////////////////////////////////////////////////////////////////////////////////////

char * shader_hll_point_cloud=
"[VERTEXFORMAT]\n"
"	XYZ DIFFUSE TEX0\n"
"[DEFINES]\n"
"	MATRIX MODEL;\n"
"	MATRIX WORLDVIEW;\n"
"	VECTOR PSIZE;\n"
"	TEXTURE Tex;\n"
"[TECHNIQUE]\n"
"[PASS0]\n"	 
"	[POSITION]\n"
"		oPos = iPos *4 MODEL;\n"
"		tmp = iPos *4 WORLDVIEW;\n"
"		oPos.x = oPos.x / oPos.w;\n"
"		oPos.y = oPos.y / oPos.w;\n"
"		d.x = PSIZE.x*(iTexture0.x-0.5)/tmp.z;\n"
"		d.y = PSIZE.y*(iTexture0.y-0.5)/tmp.z;\n"
"		oPos.z = oPos.z / oPos.w;\n"
"		oPos.w = 1.0;\n"
"		oPos.xy += d.xy;\n"
"	[DIFFUSE]\n"
"		oDiffuse = iDiffuse;\n"
"	[MAPPING0]\n"
"		oTexture0.xy = iTexture0.xy;\n"
"	[SHADER]\n"
"       map = coord(Tex0);\n"
"       if (map.x<0) discard;\n"
"       if (map.y<0) discard;\n"
"       if (map.x>1) discard;\n"
"       if (map.y>1) discard;\n"
"		col = sample(0,map.xy);\n"
"		if (col.a<0.5) discard;\n"
"		Out = Diffuse;\n"
"    [RENDER_STATE]\n"
"		Blend False\n"
"		Texture[0] Tex\n"
"		TextureCoordinate[0] TexCoo0\n"

"[END]\n"
"\n";
