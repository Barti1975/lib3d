////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	  <3D Librairies developped during 2002-2021>
//	  Copyright (C) <2021>  <Laurent Cancé Francis, 10/08/1975>
//	  laurent.francis.cance@outlook.fr
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
//	@file statement.cpp 
//	@author Laurent Cancé
////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string.h>
#include "list.h"
#include "defines.h"
#include "statement.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CState::CState() 
{ 
	state=prev=0; active=0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CStatement::CStatement()
{
    for (int n=0;n<256;n++) states[n].active=states[n].state=states[n].prev=0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CStatement::~CStatement()
{
    for (int n=0;n<256;n++) states[n].active=states[n].state=states[n].prev=0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatement::add(unsigned char s)
{
    states[s].active=1;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatement::add(unsigned char s,int value)
{
    states[s].state=value;
    states[s].prev=value;
    states[s].active=1;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatement::set(unsigned char s,int value)
{
    if (states[s].active) states[s].state=value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int CStatement::getState(unsigned char s)
{
    if (states[s].active) return states[s].state;
	else return -666;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatement::save()
{
    for (int n=0;n<256;n++)
        if (states[n].active) states[n].prev=states[n].state;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CStatement::restore()
{
    for (int n=0;n<256;n++)
        if (states[n].active) states[n].state=states[n].prev;
}
